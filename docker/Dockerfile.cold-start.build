# FROM node:20-alpine AS base

# FROM base AS builder
# RUN apk add --no-cache libc6-compat
# RUN apk update

# WORKDIR /app
# RUN npm install -g turbo
# COPY . .
# RUN turbo prune --scope=cold-start --docker

# FROM base AS installer
# RUN apk add --no-cache libc6-compat
# RUN apk update
# WORKDIR /app

# # First install the dependencies (as they change less often)
# COPY .gitignore .gitignore
# COPY --from=builder /app/out/json/ .
# COPY --from=builder /app/out/package-lock.json ./package-lock.json
# RUN npm ci

# # Build the project
# COPY --from=builder /app/out/full/ .
# RUN npx turbo run build --scope=cold-start --include-dependencies --no-deps

# FROM base AS runner
# WORKDIR /app

# # Don't run production as root
# RUN addgroup --system --gid 1001 nodejs
# RUN adduser --system --uid 1001 angelo
# USER angelo

# COPY --from=installer /app/apps/cold-start/next.config.mjs .
# COPY --from=installer /app/apps/cold-start/package.json .

# # Automatically leverage output traces to reduce image size
# # https://nextjs.org/docs/advanced-features/output-file-tracing
# COPY --from=installer --chown=nextjs:nodejs /app/apps/cold-start/.next ./
# COPY --from=installer --chown=nextjs:nodejs /app/apps/cold-start/.next/static ./apps/cold-start/.next/static
# COPY --from=installer --chown=nextjs:nodejs /app/apps/cold-start/src/public ./apps/cold-start/src/public

# WORKDIR /app/apps/web/
# CMD [ "npm", "start" ]

FROM node:20-alpine AS builder
RUN apk add --no-cache libc6-compat
RUN apk update
# Set working directory
WORKDIR /app
RUN npm i -g turbo
COPY . .
# Only Take packages that are needed to compile this app
RUN turbo prune --scope=cold-start --docker

# Add lockfile and package.json's of isolated subworkspace
FROM node:20-alpine AS installer
RUN apk add --no-cache libc6-compat
RUN apk update
WORKDIR /app
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/package-lock.json ./package-lock.json
COPY --from=builder /app/turbo.json ./turbo.json
RUN npm ci --frozen-lockfile


FROM node:20-alpine AS sourcer
RUN apk add --no-cache libc6-compat
RUN apk update
WORKDIR /app
COPY --from=installer /app/ .
COPY --from=builder /app/out/full/ .
COPY .gitignore .gitignore
RUN npx turbo run build --scope=cold-start --include-dependencies --no-deps

FROM node:20-alpine as runner
RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY --from=sourcer /app/ .
WORKDIR /app/apps/cold-start/
